# render.yaml

# Define las variables de entorno que se compartir치n entre los servicios.
# Crearemos un "Environment Group" en Render con este nombre.
envVarGroups:
  - name: chatbot-secrets
    envVars:
      - key: GEMINI_API_KEY
        sync: false # Lo estableceremos manualmente en el dashboard
      - key: PYTHON_VERSION
        value: 3.10.5
      - key: FLASK_SECRET_KEY
        generateValue: true # Render generar치 una clave segura

services:
  # Servicio 1: Servidor de Acciones de RASA
  - type: web
    name: rasa-actions
    env: docker
    repo: https://github.com/forestgump22/chatbot_project_rasa.git
    dockerfilePath: ./actions/Dockerfile
    dockerContext: ./actions
    healthCheckPath: /health
    envVarGroup: chatbot-secrets # Usa el grupo de variables

  # Servicio 2: Servidor Principal de RASA
  - type: web
    name: rasa-server
    env: python
    repo: https://github.com/forestgump22/chatbot_project_rasa.git
    plan: starter # Los modelos de RASA pueden necesitar m치s RAM
    buildCommand: |
      pip install -r requirements.txt
      rasa train
    startCommand: rasa run --enable-api --cors "*" --port $PORT
    healthCheckPath: /
    envVarGroup: chatbot-secrets # Usa el grupo de variables
    envVars:
      # Conecta este servicio con el servidor de acciones
      - key: ACTION_ENDPOINT_URL
        value: http://rasa-actions:5055/webhook

  # Servicio 3: Aplicaci칩n Flask (Interfaz con el usuario)
  - type: web
    name: flask-app
    env: python
    repo: https://github.com/forestgump22/chatbot_project_rasa.git
    buildCommand: pip install -r requirements.txt
    startCommand: gunicorn --worker-class gevent --bind 0.0.0.0:$PORT app:app
    envVarGroup: chatbot-secrets # Usa el grupo de variables
    envVars:
      # Conecta Flask con el servidor principal de RASA
      - key: RASA_API_URL
        value: http://rasa-server:5005/webhooks/rest/webhook